# -*- coding: utf-8 -*-
"""miniproyecto1-parte1-2022

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JgN9Xm24szeOqGlxKYE3ESdfPLSiMty7
"""

#Este codigo fue realizado por Carolina López y Camilo Otalora. 
# Yo, Carolina López, soy repitente por 3era vez de la materia "Analisis y procesamiento de imagenes"
# Por lo tanto se puede encontrar similitud con mis codigos realizados en los semestres 2021-1 y 2021-2
# Esos laboratorios fueron realizados junto a Jaime Andrés Torres - 201815481 y cuento con su 
#autorización para utilizar los codigos que ambos implementamos. 

import os 
import shutil 
import matplotlib.pyplot as plt
import glob 
import cv2
from skimage import io
import os
import json
from glob import glob

#Se abren las limagenes y se guardan en una lista

fotos_test = []
for img in glob.glob(os.path.join('data_mp1','BCCD', 'test', '*.jpg')):
    io_img = io.imread(img)
    fotos_test.append(io_img)


fotos_train = []
for img in glob.glob(os.path.join('data_mp1','BCCD', 'train', '*.jpg')):
    io_img = io.imread(img)
    fotos_train.append(io_img)


fotos_valid = []
for img in glob.glob(os.path.join('data_mp1','BCCD', 'valid', '*.jpg')):
    io_img = io.imread(img)
    fotos_valid.append(io_img)

"""7.2.1"""

#Se crea y se llena el subplot
plt.figure(figsize=(13, 7))

plt.subplot(2,4,1)
plt.axis('off')
plt.imshow(fotos_test[0])

plt.subplot(2,4,2)
plt.axis('off')
plt.imshow(fotos_train[1])

plt.subplot(2,4,3)
plt.axis('off')
plt.imshow(fotos_valid[2])

plt.subplot(2,4,4)
plt.axis('off')
plt.imshow(fotos_test[3])

plt.subplot(2,4,5)
plt.axis('off')
plt.imshow(fotos_train[4])

plt.subplot(2,4,6)
plt.axis('off')
plt.imshow(fotos_valid[5])

plt.subplot(2,4,7)
plt.axis('off')
plt.imshow(fotos_test[6])

plt.subplot(2,4,8)
plt.axis('off')
plt.imshow(fotos_train[7])

plt.savefig('figura 1')
plt.show()

input("Press Enter to continue...")

"""7.2.2"""

#Se abren los archivos json y se cargan en una variable 
with open ( './data_mp1/BCCD/test/_annotations.coco.json') as j:
    datos_test = json.load(j)
    
with open ( './data_mp1/BCCD/train/_annotations.coco.json') as j:
    datos_train = json.load(j)

with open ( './data_mp1/BCCD/train/_annotations.coco.json') as j:
    datos_valid = json.load(j)

#para test:

print(len(datos_test['images'])) #numero de imagenes en test

#Realizar contador para ver cuantas anotaciones hay por categoria hay por diccionario en test
contador = dict()
for anotacion in datos_test['annotations']:
  categoria = anotacion["category_id"] 
  contador[categoria] = contador.get(categoria,0) + 1
print(contador) #anotaciones en cada categoria de test

#cuantas anotaciones hay en total en el json de test
print('cantidad de anotaciones de detección que hay en test', len(datos_test['annotations']))

#Promedio de anotaciones por imagen en la carpeta test, se hace dividiendo el numero de anotaciones sobre el numero de imagenes 
print('El promedio de anotaciones por imagen para test', len(datos_test['annotations'])/len(datos_test['images']))


#Para train 
print(len(datos_train['images'])) #numero de imagenes en train}

#Realizar contador para ver cuantas anotaciones hay por categoria hay por diccionario en train
contador = dict()
for anotacion in datos_train['annotations']:
  categoria = anotacion["category_id"] 
  contador[categoria] = contador.get(categoria,0) + 1
print(contador) #anotaciones en cada categoria de train

#cuantas anotaciones hay en total en el json de test
print('cantidad de anotaciones de detección que hay en train',len(datos_train['annotations']))

#Promedio de anotaciones por imagen en la carpeta test, se hace dividiendo el numero de anotaciones sobre el numero de imagenes 
print('El promedio de anotaciones por imagen para test', len(datos_train['annotations'])/len(datos_train['images']))


#Para valid 
print(len(datos_valid['images'])) #numero de imagenes en valid

#Realizar contador para ver cuantas anotaciones hay por categoria hay por diccionario en valid
contador = dict()
for anotacion in datos_valid['annotations']:
  categoria = anotacion["category_id"] 
  contador[categoria] = contador.get(categoria,0) + 1
print(contador) #anotaciones en cada categoria de train

#cuantas anotaciones hay en total en el json de test
print('El promedio de anotaciones por imagen para valid', len(datos_valid['annotations']))

#Promedio de anotaciones por imagen en la carpeta test, se hace dividiendo el numero de anotaciones sobre el numero de imagenes 
print('el numero de anotaciones promedio por imagen es', len(datos_valid['annotations'])/len(datos_valid['images']))

#total de anotaciones
total_anotaciones = (len(datos_test['annotations']) + len(datos_train['annotations']) + len(datos_valid['annotations']))
print('la cantidad total de anotaciones es', total_anotaciones)

#promedio de anotaciones para cada imagen en total
numero_total_imagenes = (len(datos_valid['images']) + len(datos_train['images'] + len(datos_test['images'])))
promedio_anotaciones_total = (total_anotaciones / numero_total_imagenes)
print('El promedio de anotaciones por imagen en total es', promedio_anotaciones_total)

"""7.2.3"""

FALTA

"""7.3"""

#Se crea y se llena el subplot
plt.figure(figsize=(13, 10))

plt.subplot(4,4,1)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,2)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,3)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,4)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,5)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,6)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,7)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,8)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,9)
plt.axis('off')
plt.imshow()
 
plt.subplot(4,4,10)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,11)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,12)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,13)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,14)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,15)
plt.axis('off')
plt.imshow()

plt.subplot(4,4,16)
plt.axis('off')
plt.imshow()

plt.savefig('figura 2')
plt.show()

input("Press Enter to continue...")